name: CI/CD Pipeline - Backend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for MongoDB
      run: |
        for i in {30..0}; do
          if mongosh --eval "db.adminCommand('ismaster')" > /dev/null 2>&1; then
            break
          fi
          echo 'MongoDB is unavailable - sleeping'
          sleep 1
        done
        if [ "$i" = 0 ]; then
          echo 'MongoDB is unavailable - giving up'
          exit 1
        fi
        echo 'MongoDB is up - executing command'
    
    - name: Setup test database
      run: |
        echo "MongoDB test database will be created automatically on first use"
      
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://127.0.0.1:27017/dozyr_test
        MONGO_DB_NAME: dozyr_test
        JWT_SECRET: test-secret-key

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --production
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r . deploy/
        cd deploy
        rm -rf node_modules
        npm ci --production
        tar -czf ../backend-deploy.tar.gz .
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-deployment
        path: backend-deploy.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-deployment
    
    - name: Deploy to shared hosting
      run: |
        # Install SSH client
        sudo apt-get update
        sudo apt-get install -y openssh-client
        
        # Setup SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
        
        # Upload and deploy
        scp backend-deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.HOST }}:/tmp/
        ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Backup current deployment
          if [ -d "current" ]; then
            cp -r current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Extract new deployment
          mkdir -p new-deploy
          cd new-deploy
          tar -xzf /tmp/backend-deploy.tar.gz
          
          # Install dependencies
          npm ci --production
          
          # Run database migrations if needed
          # npm run migrate
          
          # Stop current application
          pm2 stop dozyr-backend || true
          
          # Switch to new deployment
          cd ..
          rm -rf current
          mv new-deploy current
          cd current
          
          # Start application
          pm2 start ecosystem.config.js --env production || pm2 start server.js --name "dozyr-backend"
          pm2 save
          
          # Cleanup
          rm /tmp/backend-deploy.tar.gz
        EOF

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: github.ref == 'refs/heads/main'
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Backend deployment successful"
        else
          echo "❌ Backend deployment failed"
        fi